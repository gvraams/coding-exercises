var search_data = {"index":{"searchIndex":["softdeletable","classmethods","active?()","allow_active_record_destroy()","can_destroy_active_record=()","can_destroy_active_record?()","disable_soft_delete=()","disable_soft_delete?()","included()","prevent_active_record_destroy()","soft_delete()","soft_delete_all()","soft_deleted?()","soft_destroy()","soft_destroy_all()","undelete()","undelete_all()","undestroy()","undestroy_all()","with_soft_deleted()"],"longSearchIndex":["softdeletable","softdeletable::classmethods","softdeletable#active?()","softdeletable::allow_active_record_destroy()","softdeletable::can_destroy_active_record=()","softdeletable::can_destroy_active_record?()","softdeletable::disable_soft_delete=()","softdeletable::disable_soft_delete?()","softdeletable::included()","softdeletable#prevent_active_record_destroy()","softdeletable#soft_delete()","softdeletable::classmethods#soft_delete_all()","softdeletable#soft_deleted?()","softdeletable#soft_destroy()","softdeletable::classmethods#soft_destroy_all()","softdeletable#undelete()","softdeletable::classmethods#undelete_all()","softdeletable#undestroy()","softdeletable::classmethods#undestroy_all()","softdeletable::with_soft_deleted()"],"info":[["SoftDeletable","","SoftDeletable.html","",""],["SoftDeletable::ClassMethods","","SoftDeletable/ClassMethods.html","",""],["active?","SoftDeletable","SoftDeletable.html#method-i-active-3F","()","<p>Determines whether this record is not marked for deletion @return [Boolean] true if record is not marked …\n"],["allow_active_record_destroy","SoftDeletable","SoftDeletable.html#method-c-allow_active_record_destroy","(&block)","<p>Accepts a block in which records can be destroyed regardless of whether they&#39;re marked for deletion. …\n"],["can_destroy_active_record=","SoftDeletable","SoftDeletable.html#method-c-can_destroy_active_record-3D","(allow_destroy)","<p>With this enabled, :destroy &amp; :destroy_all methods will truly remove records from the DB regardless …\n"],["can_destroy_active_record?","SoftDeletable","SoftDeletable.html#method-c-can_destroy_active_record-3F","()","<p>Determines whether record can be destroyed without being marked for deletion @return [Boolean] true if …\n"],["disable_soft_delete=","SoftDeletable","SoftDeletable.html#method-c-disable_soft_delete-3D","(disable)","<p>With this enabled, queries returns records that are marked for deletion. Check `default_scope` definition. …\n"],["disable_soft_delete?","SoftDeletable","SoftDeletable.html#method-c-disable_soft_delete-3F","()","<p>Returns true when invoked within `with_soft_deleted` block.\n"],["included","SoftDeletable","SoftDeletable.html#method-c-included","(base)","<p>“Mark as Deleted” via custom implementation on top of Discard gem\n<p>Implemented methods: Mark …\n"],["prevent_active_record_destroy","SoftDeletable","SoftDeletable.html#method-i-prevent_active_record_destroy","()","<p>Prevents records from being destroyed unless they&#39;re marked for deletion @return [Boolean] true if …\n"],["soft_delete","SoftDeletable","SoftDeletable.html#method-i-soft_delete","()","<p>Soft deletes without callbacks\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GroupEvent</span>.<span class=\"ruby-identifier\">first</span>.<span class=\"ruby-identifier\">soft_delete</span>\n</pre>\n"],["soft_delete_all","SoftDeletable::ClassMethods","SoftDeletable/ClassMethods.html#method-i-soft_delete_all","()","<p>Marks all records for deletion without callbacks\n"],["soft_deleted?","SoftDeletable","SoftDeletable.html#method-i-soft_deleted-3F","()","<p>Determines whether this record is marked for deletion. @return [Boolean] true if record is marked for …\n"],["soft_destroy","SoftDeletable","SoftDeletable.html#method-i-soft_destroy","()","<p>Soft deletes with callbacks.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GroupEvent</span>.<span class=\"ruby-identifier\">first</span>.<span class=\"ruby-identifier\">soft_destroy</span>\n</pre>\n"],["soft_destroy_all","SoftDeletable::ClassMethods","SoftDeletable/ClassMethods.html#method-i-soft_destroy_all","()",""],["undelete","SoftDeletable","SoftDeletable.html#method-i-undelete","()","<p>Restores without callbacks\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GroupEvent</span>.<span class=\"ruby-identifier\">first</span>.<span class=\"ruby-identifier\">undelete</span>\n</pre>\n"],["undelete_all","SoftDeletable::ClassMethods","SoftDeletable/ClassMethods.html#method-i-undelete_all","()","<p>Restores all records without callbacks\n"],["undestroy","SoftDeletable","SoftDeletable.html#method-i-undestroy","()","<p>Restores with callbacks.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GroupEvent</span>.<span class=\"ruby-identifier\">first</span>.<span class=\"ruby-identifier\">undestroy</span>\n</pre>\n"],["undestroy_all","SoftDeletable::ClassMethods","SoftDeletable/ClassMethods.html#method-i-undestroy_all","()","<p>Restores all records with callbacks for each. Alias for `undiscard_all`\n"],["with_soft_deleted","SoftDeletable","SoftDeletable.html#method-c-with_soft_deleted","(&block)","<p>Accepts a block in which queries include records that have been marked for deletion.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GroupEvent</span>.<span class=\"ruby-identifier\">with_soft_deleted</span>.<span class=\"ruby-identifier\">count</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"]]}}